#include <iostream>
#include<climits>
#include<unordered_map>
using namespace std;

int main()
{
	int V,E;
  	cin>>V>>E;
    int **edges=new int*[V];
    for(int i=0;i<V;i++)
    {
		edges[i]=new int[V];
        for(int j=0;j<V;j++)
            edges[i][j]=0;
    }
    for(int i=0;i<E;i++)
    {
        int f,s,wt;
        cin>>f>>s>>wt;
        edges[f][s]=wt;
        edges[s][f]=wt;
    }
  	/*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to Print the output yourself
	 */
	bool visited[V];
    int weight[V];
    int parent[V];
    unordered_map <int,int> unvisited;
    for(int i=0;i<V;i++)
    {
        visited[i]=false;
        weight[i]=INT_MAX;
        unvisited[i]=INT_MAX;
        parent[i]=-1;
    }
    weight[0]=0;
    parent[0]=-1;
    unvisited[0]=0;
    while(!unvisited.empty())
    {
        int min=INT_MAX;
        int i;
        unordered_map<int, int>::iterator it = unvisited.begin();
		while (it != unvisited.end())
        {
			if(min>(it->second) && !visited[it->first])
            {
				i=it->first;
                min=it->second;
            }
			it++;
		}
        visited[i]=true;
        unvisited.erase(i);
        for(int j=0;j<V;j++)
        {
            if(edges[i][j]>0 && !visited[j])
            {
                if(edges[i][j]<weight[j])
                {
                    parent[j]=i;
                    weight[j]=edges[i][j];
                    unvisited[j]=edges[i][j];
                }
            }
        }
    }
    for(int i=1;i<V;i++)
    {
        if(i>parent[i])
            cout<<parent[i]<<" "<<i<<" "<<weight[i]<<endl;
        else
            cout<<i<<" "<<parent[i]<<" "<<weight[i]<<endl;
    }
  	return 0;
}
